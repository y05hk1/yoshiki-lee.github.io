<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leebeecee</title>
  
  <subtitle>Diary</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-25T17:03:04.996Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yo-lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>逆向工程核心原理笔记</title>
    <link href="http://yoursite.com/2020/09/23/restudy/"/>
    <id>http://yoursite.com/2020/09/23/restudy/</id>
    <published>2020-09-23T08:45:11.023Z</published>
    <updated>2020-09-25T17:03:04.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向工程核心原理学习笔记"><a href="#逆向工程核心原理学习笔记" class="headerlink" title="逆向工程核心原理学习笔记"></a>逆向工程核心原理学习笔记</h1><p>作者：<a href="yoshiki-lee.github.io">yoshiki-lee</a> </p><p>本专题的目的是为了总结逆向工程核心原理这本书籍一些比较重要的知识点。</p><h3 id="第一部分："><a href="#第一部分：" class="headerlink" title="第一部分："></a>第一部分：</h3><h4 id="汇编指令学习记录"><a href="#汇编指令学习记录" class="headerlink" title="汇编指令学习记录"></a>汇编指令学习记录</h4><h5 id="mov与lea区别"><a href="#mov与lea区别" class="headerlink" title="mov与lea区别"></a>mov与lea区别</h5><p>mov不再过多赘述：</p><p>lea指令介绍：</p><p>lea(load effective address)：意为加载有效地址。</p><p>经常在各种博客当中看到lea和mov的区别，那么怎么将其作区分呢？</p><p>例如mov ax, bx,意为保存bx的值到ax当中</p><p>那么lea ax, bx是什么意思？</p><p>首先，上述指令是非法指令，因为lea第二操作数不加[]是非法的</p><p>之前学习汇编的时候，将常数与常数的指针以t和[t]做区分</p><p>结合lea的意思，且lea ax, [bx]是合法指令的情况下</p><p>mov ax,[bx]的意思是把内存地址为bx中的数据赋给ax</p><p>lea ax, [bx]的意思是直接将bx赋值给ax</p><h4 id="ollydbg的基本使用："><a href="#ollydbg的基本使用：" class="headerlink" title="ollydbg的基本使用："></a>ollydbg的基本使用：</h4><p>待更新</p><h4 id="栈与栈帧："><a href="#栈与栈帧：" class="headerlink" title="栈与栈帧："></a>栈与栈帧：</h4><h5 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h5><p>​    栈是一种特殊的数据结构，栈最重要的一个思想就是先进后出。而在8086汇编当中，有两个基本的寄存器与其关联，即SS与sp(这里寄存器统一用16位寄存器)，SS指向栈低，sp指向栈顶，由此我们可以得出结论，栈是CPU寄存器里的ss:sp指向的一片内存区域。</p><p><img src="https://i.loli.net/2020/09/24/8glXavjRhVsbnrU.png" alt="stack"></p><p>ps：正是因为栈先进后出，在函数中，引用参数时，参数入栈的顺序与源码中的参数顺序恰好相反</p><h5 id="栈帧："><a href="#栈帧：" class="headerlink" title="栈帧："></a>栈帧：</h5><p>​    </p><p>​    我们先来看一个栈帧的函数结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#这里使用32位寄存器做说明</span><br><span class="line">PUSH EBP ;函数起始，会先保存进入函数前EBP的值</span><br><span class="line">MOV EBP, ESP ;将ESP的值赋给EBP, 这里也是栈帧的开始，EBP此时指向栈帧的底部。</span><br><span class="line">SUB ESP,08H#提前申请内存空间</span><br><span class="line">...&#x2F;#中间代码</span><br><span class="line">ADD ESP,08H#释放申请的内存空间</span><br><span class="line">MOV ESP, EBP;此时相当于回收栈帧，ESP重新指向曾经的栈顶</span><br><span class="line">POP EBP;恢复EBP的值</span><br></pre></td></tr></table></figure><p>栈帧技术使用EBP寄存器管理局部变量、参数、返回地址。</p><p>栈帧是函数活动的记录，生命周期随着函数开始而开始。核心原理上面讲，ESP寄存器承担着栈顶指针的作用，程序运行中，ESP的值随时变化，访问栈中函数的局部变量、参数时，若以ESP为基准编写程序会十分困难，并且也很难受使CPU引用到准确的作用。</p><p>​    栈帧是利用BP来指向栈帧的底部，用SP指向栈帧的顶部。</p><h3 id="第二部分-PE文件格式"><a href="#第二部分-PE文件格式" class="headerlink" title="第二部分  PE文件格式"></a>第二部分  PE文件格式</h3><p><font size=4 color= "pink"><strong>如果单单是学习过一个知识点之后把知识罗列出来，似乎没有什么意义，在我之前已经有不少师傅总结过这些东西了，那么我会尽可能的用我自己的学习历程来记录这个知识点，话不多说，开整！</strong></font></p><h4 id="pe文件格式："><a href="#pe文件格式：" class="headerlink" title="pe文件格式："></a>pe文件格式：</h4><h5 id="学习准备：lordPe-WINHEX"><a href="#学习准备：lordPe-WINHEX" class="headerlink" title="学习准备：lordPe,WINHEX"></a>学习准备：<a href="https://softfamous.com/lordpe/download/">lordPe</a>,<a href="https://x-ways.net/winhex/">WINHEX</a></h5><h5 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h5><p>介绍这一部分，主要依据了<a href="https://book.douban.com/subject/25866389/">逆向工程核心原理</a>这本书。</p><p>PE文件是Windows操作系统下使用的可执行文件格式。它是微软在UNIX平台的COFF（通用对象文件格式）基础上制作而成的。</p><p>32位可执行文件称为PE文件;</p><p>64位可执行文件称为PE+, 是PE文件的一种扩展形式。</p><p>PE文件种类：</p><p><img src="https://i.loli.net/2020/09/25/dsEeI8Nv9QGh5cz.png" alt="image-20200925215704186"></p><p>严格来说，OBJ文件之外的所有文件都是可执行的。DLL、SYS等虽然不能直接在shell中运行，但是可以使用其他方法执行(调试器)。</p><p>这里做一个知识拓展。</p><p>众所周知，CPP文件到EXE文件经历了如下的心路历程</p><p>cpp-&gt;obj-&gt;dll,lib-&gt;exe</p><p>lib是编译时需要的，lib是运行时需要的。</p><h5 id="知识铺垫："><a href="#知识铺垫：" class="headerlink" title="知识铺垫："></a>知识铺垫：</h5><p><font size=3 color= "pink"><strong>王爽的汇编是少数我能读下来一遍过的计算机类书籍，这和作者利用”知识屏蔽“的手法不无关系。但是许多书籍并没有所谓的知识屏蔽，但我还是得读，窃以为，有些书籍的知识点会关联别的知识点，另一个知识点我不会怎么办？我自己用的方法是，暂时大概理解，因为计算机各种体系的知识过于庞杂，要全部融会贯通对我实在遥不可及。当然，前面说了暂时二字，后续也得补充</strong></font></p><h6 id="虚拟内存："><a href="#虚拟内存：" class="headerlink" title="虚拟内存："></a>虚拟内存：</h6><p>虚拟内存技术是基于局部性原理的，暂时可以这样理解虚拟内存技术的实现，不常用的课本是在书架上的，常用的课本在书包里，这就使得，<font color= "orange">我们不必将所有的书放在书包里，但是这些书都是我们学习过程中要用到的东西。</font></p><p>那么利用了虚拟内存技术，我们会不定的更换书包中的书本，在内存中建立一个连续的内存单元是不方便实现这种模式的，故我们采用离散分配的方式。当然，单个文件分配到内存应是连续的。</p><p><img src="https://i.loli.net/2020/09/25/raleqLwtckW8s3C.png" alt="VirtualMem01.png"></p><h6 id="一些定义："><a href="#一些定义：" class="headerlink" title="一些定义："></a>一些定义：</h6><p>ImageBase: 内存基址</p><p>VA: 虚拟地址：指文件被载入虚拟空间之后的地址</p><p>RVA: 相对虚拟地址：指文件载入内存后相对与ImageBase的偏移量。 RVA = VA - ImageBase。</p><p>FOA：理解为文件在磁盘上相对于文件起始地址的偏移地址。</p><h5 id="PE文件结构："><a href="#PE文件结构：" class="headerlink" title="PE文件结构："></a>PE文件结构：</h5><p><img src="https://i.loli.net/2020/09/25/v1qaBgJru5N3WOF.png" alt="image-20200925235026004"></p><p>我们惊奇的发现文件的大小似乎改变了，但是两边整体的大小各自减去NULL的部分之后，他们仍然是一样的大小，后面详细的原理，慢慢道来。</p><h5 id="dos头："><a href="#dos头：" class="headerlink" title="dos头："></a>dos头：</h5><p>关于dos头，只需记住，这是微软考虑PE文件对DOS文件的兼容性，扩展已有的DOS EXE头。</p><p><img src="https://i.loli.net/2020/09/25/fC7iM2bge8Lphkl.png" alt="image-20200925235317502"></p><p>由图，可以看到这是一个结构体，那么我们当然要全部记住（？？？）/doge</p><p>只需记住两个部分即可，e_magic和e_flanew</p><h6 id="e-magic"><a href="#e-magic" class="headerlink" title="e_magic"></a>e_magic</h6><p>随意打开一个32位的exe文件，惊喜的发现，会有这个东西</p><p><img src="https://i.loli.net/2020/09/26/cQW3km2wghnSDr8.png" alt="image-20200925235959122"></p><p>ok，接下来略作修改</p><p><img src="https://i.loli.net/2020/09/26/EIC7s5rygpv8Ati.png" alt="image-20200926000148704"></p><p>运行这个exe程序</p><p><img src="https://i.loli.net/2020/09/26/fpieHY2uUyJCtmn.png" alt="image-20200926000246873"></p><p>更加惊喜！</p><p>你只需把他记住PE文件的一种约定。实际上，MZ是dos可执行文件的设计者姓名首字母的缩写。</p><p>直接略过结构体其他部分</p><p>直到最后</p><h6 id="e-lfanew"><a href="#e-lfanew" class="headerlink" title="e_lfanew"></a><strong>e_lfanew</strong></h6><p>没什么好讲的，他定位到了NT头。</p><p>不信？</p><p><img src="https://i.loli.net/2020/09/26/6sQc2T3mMJ1AjOP.png" alt="image-20200926001252090"></p><p>好的，那么接下来分析NT头</p><p>dos_stub:???</p><h6 id="dos存根"><a href="#dos存根" class="headerlink" title="dos存根"></a>dos存根</h6><p>dos存根是位于DOS头下方的一个可选项，大小不确定。这里不多赘述。</p><p>dos_stub:???</p><h5 id="NT头："><a href="#NT头：" class="headerlink" title="NT头："></a>NT头：</h5><p>叫NT是因为windows nt的关系，没骂人。</p><p>NT头结构体，：</p><p><img src="https://i.loli.net/2020/09/26/WmchsUrnvfF1J4k.png" alt="image-20200926002205972"></p><p>惊奇的发现，后面两个是结构体中的结构体中的…</p><p><img src="https://i.loli.net/2020/09/26/6P2OXTJct4ej5mS.png" alt="image-20200926002656342"></p><p>好了，刚刚e_lfanew指向了NT头，signature作为结构体第一个成员，理所应当被指♂向了。</p><p><img src="https://i.loli.net/2020/09/26/hJTx3Z5RS71MYnN.png" alt="image-20200926002851937"></p><p>既然是签名，那么估计也是一种约定。</p><p>有兴趣可以修改一下这两个值。</p><h5 id="文件头："><a href="#文件头：" class="headerlink" title="文件头："></a>文件头：</h5><p><img src="https://i.loli.net/2020/09/26/86xmGgDOlEubWj4.png" alt="image-20200926003028766"></p><h6 id="machine："><a href="#machine：" class="headerlink" title="machine："></a>machine：</h6><p><img src="https://i.loli.net/2020/09/26/LDBNgVIhbROdS5X.png" alt="image-20200926003924149"></p><h6 id="NumberOfSections"><a href="#NumberOfSections" class="headerlink" title="NumberOfSections:"></a>NumberOfSections:</h6><p>用来指出文件中存在的分区数量</p><p><img src="https://i.loli.net/2020/09/26/MjgHP2EyCKznDOT.png" alt="image-20200926004143847"></p><p><img src="https://i.loli.net/2020/09/26/e3GIUliVS5FwfJj.png" alt="image-20200926004240771"></p><h6 id="SizeOfOptionalHeader"><a href="#SizeOfOptionalHeader" class="headerlink" title="SizeOfOptionalHeader:"></a>SizeOfOptionalHeader:</h6><p>用来指出IMAGE_OPTIONAL_HEADER的大小。</p><h6 id="characteristics："><a href="#characteristics：" class="headerlink" title="characteristics："></a>characteristics：</h6><p>根据对应值用以指明文件的一些属性</p><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20200926004917922.png" alt="image-20200926004917922"></p><p>winhex中，这里是0307</p><p><img src="https://i.loli.net/2020/09/26/NTGkuDbYUVsKMjm.png" alt="123"></p><p>做个累加，说明它符合</p><p>0x0001+0x0002+0x0004</p><p>and0x0010+0x0020</p><h5 id="NT头：可选头"><a href="#NT头：可选头" class="headerlink" title="NT头：可选头"></a>NT头：可选头</h5><p>OK捡起重要的分析</p><h6 id="magic："><a href="#magic：" class="headerlink" title="magic："></a>magic：</h6><p>指出文件的类型</p><p><img src="https://i.loli.net/2020/09/26/FtLpoZ6edrsUgbJ.png" alt="image-20200926010141036"></p><p><img src="https://i.loli.net/2020/09/26/oiLh8T5ySfwVXMg.png" alt="image-20200926010205584"></p><p>未完待续……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逆向工程核心原理学习笔记&quot;&gt;&lt;a href=&quot;#逆向工程核心原理学习笔记&quot; class=&quot;headerlink&quot; title=&quot;逆向工程核心原理学习笔记&quot;&gt;&lt;/a&gt;逆向工程核心原理学习笔记&lt;/h1&gt;&lt;p&gt;作者：&lt;a href=&quot;yoshiki-lee.github</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初遇</title>
    <link href="http://yoursite.com/2020/09/23/%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2020/09/23/%E5%88%9D%E8%AF%86/</id>
    <published>2020-09-23T03:52:41.000Z</published>
    <updated>2020-09-23T06:36:28.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初次见面，多多指教"><a href="#初次见面，多多指教" class="headerlink" title="初次见面，多多指教"></a>初次见面，多多指教</h2><p>​    我是<a href="https://yoshiki-lee.github.io/">yoshiki-lee</a></p><p>​    自我介绍这里暂时就略过吧，因为目前处于初学的阶段，也没有什么成绩。</p><p>​    目前入坑二进制安全，也简单的做了<a href="https://buuoj.cn/resources">BUUCTF</a>一些re方向的入门题目。可能现在有的东西，只有热情和兴趣，但对于迷茫了许久的我来说，下定决心要做这个门槛较高的方向，也是很宝贵的经历。</p><p>​    我会在这里更新自己的一些学习笔记，希望能和正处于这个行业的师傅们有所交流。    </p><p>​    谢谢<a href="https://redogwu.github.io/">wjllz</a>这个b。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初次见面，多多指教&quot;&gt;&lt;a href=&quot;#初次见面，多多指教&quot; class=&quot;headerlink&quot; title=&quot;初次见面，多多指教&quot;&gt;&lt;/a&gt;初次见面，多多指教&lt;/h2&gt;&lt;p&gt;​    我是&lt;a href=&quot;https://yoshiki-lee.github</summary>
      
    
    
    
    
  </entry>
  
</feed>
